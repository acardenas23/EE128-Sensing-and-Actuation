/*
 * Copyright (c) 2015, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "fsl_device_registers.h"

unsigned short ADC0A_read16b(void);
unsigned short ADC0B_read16b(void);
void PORTA_IRQHandler(void);
void Servo_move(int low, int high);

unsigned int photo1 = 0;
unsigned int photo2 = 0;
int i = 0;
/*
*position 0 -> 333 Low, 6333 High
*position 45 ->2966 low, 3700 High
*position 90 -> 5600 low, 1000 High
*position 135 -> 4880 low, 1786 high
*position 180 -> 4160 low, 1550 high
*/
int low = 300;
int high = 6500;
int pos0low = 333;
int pos0high = 6333;
int pos45low = 2966;
int pos45high = 3700;
int pos90low = 5600;
int pos90high = 1786;
int pos135low = 4880;
int pos135high = 1786;
int pos180low = 4160;
int pos180high = 1550;

int main(void)
{
	SIM_SCGC6 |= SIM_SCGC6_ADC0_MASK;  // 0x8000000u; Enable ADC0 Clock
//	SIM_SCGC6 |= SIM_SCGC6_ADC1_MASK;
	SIM_SCGC5 |= SIM_SCGC5_PORTC_MASK; //Port C Clock Enable
	SIM_SCGC3 |= SIM_SCGC3_FTM3_MASK; //FTM3 clock enable
	SIM_SCGC5 |= SIM_SCGC5_PORTD_MASK; /*Enable Port D Clock Gate Control*/

	PORTD_GPCLR = 0x00FF0100; //Configure PD[0:7] for GPIO

	ADC0_CFG1 = 0x0C; //Configure ADC for 16 bits, and to use bus clock.
	ADC0_SC1A = 0x1F; //Disable the ADC module;
	ADC1_CFG1 = 0x0C; //Configure ADC for 16 bits, and to use bus clock.
	ADC1_SC1A = 0x1F; //Disable the ADC module;

	PORTC_PCR10 = 0x300; //PORT C Pin 10 as FTM3_CH6 (ALT3)
	FTM3_MODE = 0x5; //Enable FTM3
	FTM3_MOD = 0xFFFF;
	FTM3_SC = 0x0D; //System clock / 64

	GPIOD_PDDR = 0xFF; //PORTD [7:0] output


	while (1) {
		Servo_move(low,high);
		photo1 = ((unsigned int)ADC0A_read16b()*33)/0xFFFF;
		photo2 = ((unsigned int)ADC0B_read16b()*33)/0xFFFF;

		if(photo1>photo2){
			GPIOD_PDOR = 0x01;
		}else if(photo1<photo2){
			GPIOD_PDOR = 0x02;
		}else{
			GPIOD_PDOR = 0x03;
		}

	}

    return 0;
}




void Servo_move(int low, int high)
{
	//20ms period
	//50Hz period
	/*Generate 50Hz waveform with 1-2ms Duty Cycle
	 *PTC10 pin
	 *PTC10 System clock is 21MHz
	 *Set Prescaler to 64 -> 1 timer tick duration
	 *1 sec / (21MHz / 64) = 3us
	 *# of ticks that the output signal are high and low
	 *HIGH for 1ms -> 1000/3 = 333
	 *HIGH for 2ms -> 2000/3 = 666
	 *LOW for 18ms -> 18000/3 = 6000
	 *LOW for 19ms -> 19000/3 = 6333
	 *Low+HIGH = 6666
	*/

	FTM3_C6SC = 0x1C; // Output-compare; Set output
	FTM3_C6V = FTM3_CNT + low; // 18ms LOW
	while(!(FTM3_C6SC & 0x80));
	FTM3_C6SC &= ~(1 << 7);

	FTM3_C6SC = 0x18; // Output-compare; Clear output
	FTM3_C6V = FTM3_CNT + high; // 1-2ms HIGH
	while(!(FTM3_C6SC & 0x80));
	FTM3_C6SC &= ~(1 << 7);
	for (int i = 0; i < 10000; i++); // S/W Delay

//	for(i = 0; i <= 60; ++i)
//	{
//		//Make servo rotate
//		FTM3_C6SC = 0x1C; // Output-compare; Set output
//		FTM3_C6V = FTM3_CNT + low;
//		while(!(FTM3_C6SC & 0x80));
//		FTM3_C6SC &= ~(1 << 7);
//
//		FTM3_C6SC = 0x18; // Output-compare; Clear output
//		FTM3_C6V = FTM3_CNT + high; // 1-2ms HIGH
//		while(!(FTM3_C6SC & 0x80));
//		FTM3_C6SC &= ~(1 << 7);
//		for (int i = 0; i < 10000; i++); // S/W Delay
//
//		low -=20;
//		high +=20;
//		for (int i = 0; i < 50000; i++); // S/W Delay
//	}
//	for(i = 60; i >= 0; --i)
//	{
//		//Make servo rotate in opposite direction
//		FTM3_C6SC = 0x1C; // Output-compare; Set output
//		FTM3_C6V = FTM3_CNT + low;
//		while(!(FTM3_C6SC & 0x80));
//		FTM3_C6SC &= ~(1 << 7);
//
//		FTM3_C6SC = 0x18; // Output-compare; Clear output
//		FTM3_C6V = FTM3_CNT + high; // 1-2ms HIGH
//		while(!(FTM3_C6SC & 0x80));
//		FTM3_C6SC &= ~(1 << 7);
//		for (int i = 0; i < 10000; i++); // S/W Delay
//
//		low +=20;
//		high -=20;
//		for (int i = 0; i < 80000; i++); // S/W Delay
//	}

}



unsigned short ADC0A_read16b(void)
{
	ADC0_SC1A = 0x00; //Write to SC1A to start conversion from ADC_0
	while(ADC0_SC2 & ADC_SC2_ADACT_MASK); //Conversion in progress
	while(!(ADC0_SC1A & ADC_SC1_COCO_MASK)); //until conversion completes
	return ADC0_RA;
}

unsigned short ADC0B_read16b(void)
{
	ADC0_SC1A = 0x00; //Write to SC1A to start conversion from ADC_0
	while(ADC1_SC2 & ADC_SC2_ADACT_MASK); //Conversion in progress
	while(!(ADC1_SC1A & ADC_SC1_COCO_MASK)); //until conversion completes
	return ADC1_RA;
}

//void PORTA_IRQHandler(void){
//	NVIC_ClearPendingIRQ(PORTA_IRQn); //Clear pending Interrupt
//
//	photo1 = ((unsigned int)ADC0_read16b()*33)/0xFFFF;
//	photo2 = ((unsigned int)ADC1_read16b()*33)/0xFFFF;
//
//	if(photo1 > photo2){
//		//135 position
//		Servo_move(pos135low, pos135high);
//	}else if (photo2 > photo1){
//		//45 position
//		Servo_move(pos45low, pos45high);
//	}else if(photo1 == photo2){
//		//90 position
//		Servo_move(pos90low, pos90high);
//	}
//
//	/*Output ADC values to LED screen -> can use arduino for this*/
//
//	PORTA_ISFR = (1 << 1); //Clear
//
//}

////////////////////////////////////////////////////////////////////////////////
// EOF
////////////////////////////////////////////////////////////////////////////////
