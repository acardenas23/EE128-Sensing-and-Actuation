=============================================================================
List of generated methods in project: Lab_6_1

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "Pins1"     (component PinSettings)

Module "FX1"       (component FXOS8700CQ)
   - FX1_Enable -Enables the device with setting the ACTIVE bit in the CTRL register 1
   - FX1_Disable -Disables the device with clearing the ACTIVE bit in the CTRL register 1
   - FX1_isEnabled -Returns the status of the the ACTIVE bit in the CTRL register 1
   - FX1_SwReset -Perform a software reset using the rst bit in the CTRL register 2
   - FX1_ReadReg8 -Reads an 8bit device register
   - FX1_WriteReg8 -Write an 8bit device register
   - FX1_GetX -Retrieves the value for the X axis. The value is adjusted with the zero calibration value (0 for 0 g, negative 
                for negative acceleration and positive for positive acceleration).
   - FX1_GetY -Retrieves the value for the Y axis. The value is adjusted with the zero calibration value (0 for 0 g, negative 
                for negative acceleration and positive for positive acceleration).
   - FX1_GetZ -Retrieves the value for the Z axis. The value is adjusted with the zero calibration value (0 for 0 g, negative 
                for negative acceleration and positive for positive acceleration).
   - FX1_GetRaw8XYZ -Returns in an array the x, y and z accelerometer as 8bit values.
   - FX1_CalibrateX1g -Performs a calibration of the sensor. It is assumed that the Y and Z sensors have 0 g, and the X sensor 
                has 1 g.
   - FX1_CalibrateY1g -Performs a calibration of the sensor. It is assumed that the X and Z sensors have 0 g, and the Y sensor 
                has 1 g.
   - FX1_CalibrateZ1g -Performs a calibration of the sensor. It is assumed that the X and Y sensors have 0 g, and the Z sensor 
                has 1 g.
   - FX1_GetXmg -Returns the X value in mg
   - FX1_GetYmg -Returns the Y value in mg
   - FX1_GetZmg -Returns the Z value in mg
   - FX1_MeasureGetRawX -Performs a measurement on X channel and returns the raw value.
   - FX1_MeasureGetRawY -Performs a measurement on Y channel and returns the raw value.
   - FX1_MeasureGetRawZ -Performs a measurement on Z channel and returns the raw value.
   - FX1_GetXOffset -Returns the offset applied to the X value.
   - FX1_GetYOffset -Returns the offset applied to the Y value.
   - FX1_GetZOffset -Returns the offset applied to the Z value.
   - FX1_GetX1gValue -Returns the value for 1g for channel  X.
   - FX1_GetY1gValue -Returns the value for 1g for channel  Y.
   - FX1_GetZ1gValue -Returns the value for 1g for channel  Z.
   - FX1_SetFastMode -Turns the F_READ (Fast Read Mode) on or off
   - FX1_WhoAmI -Returns the value of the WHO_AM_I (0x0D) register
   - FX1_GetTemperature -Returns the temperature of the die as signed 8bit values in degree Celsius
   - FX1_GetMagX -Returns the X magnetometer value.
   - FX1_GetMagY -Returns the Y magnetometer value.
   - FX1_GetMagZ -Returns the Z magnetometer value.
   - FX1_MagneticSensorReset -Initiates a magnetic sensor reset cycle that will restore correct operation after exposure to an 
                excessive magnetic field which exceeds the Full Scale Range but is less than the Maximum Applied Magnetic Field.
   - FX1_Init -Initializes the device driver
   - FX1_Deinit -Counterpart to Init() method.

Module "MCUC1"     (component McuLibConfig)
   - MCUC1_Init -Driver initialization method
   - MCUC1_Deinit -Driver deinitialization method

Module "GI2C1"     (component GenericI2C)
   - GI2C1_SelectSlave -Selects the slave device on the bus. Method might use a semaphore to protect bus access.
   - GI2C1_UnselectSlave -Unselects the device. Method will release a used a semaphore.
   - GI2C1_RequestBus -Starts a critical section for accessing the bus.
   - GI2C1_ReleaseBus -Finishes a critical section for accessing the bus.
   - GI2C1_WriteBlock -Write a block to the device.
   - GI2C1_ReadBlock -Read from the device a block.
   - GI2C1_ReadAddressWait -Same as ReadAddress, but with an optional wait between the address and read. Read from the device. 
                This writes (S+i2cAddr+0), (memAddr), (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_ReadAddress -Read from the device. This writes (S+i2cAddr+0), (memAddr), (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteAddress -Write to the device: (S+i2cAddr+0), (memAddr), (data)...(data+P)
   - GI2C1_ReadByte -Read a byte from the device. This writes (S+i2cAddr+0), (Sr+i2cAddr+1),(data+P)
   - GI2C1_WriteByte -Write a byte to the device: (S+i2cAddr+0).(data+P)
   - GI2C1_ReadByteAddress8 -Read a byte from the device using an 8bit memory address. This writes (S+i2cAddr+0), (memAddr), 
                (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteByteAddress8 -Write a byte to the device using an 8bit memory address: (S+i2cAddr+0), (memAddr), (data)...
                (data+P)
   - GI2C1_ReadWordAddress8 -Read a word from the device using an 8bit memory address. This writes (S+i2cAddr+0), (memAddr), 
                (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteWordAddress8 -Write a word to the device using an 8bit memory address: (S+i2cAddr+0), (memAddr), (data)...
                (data+P)
   - GI2C1_ProbeACK -Accesses the bus to check if the device responds with an ACK (ACK polling).
   - GI2C1_GetSemaphore -Returns the currently allocated semaphore.
   - GI2C1_ScanDevice -Checks if a device responds on the bus with an ACK.
   - GI2C1_Deinit -Deinitializes the driver.
   - GI2C1_Init -Initializes the driver.

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.
   - WAIT1_Init -Driver initialization routine.
   - WAIT1_DeInit -Driver de-initialization routine

Module "CI2C1"     (component I2C_LDD)
   - CI2C1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - CI2C1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - CI2C1_MasterSendBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes inclusive 
                of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The slave address must be 
                specified before, by the "SelectSlaveDevice" method or in component initialization section, "Target slave 
                address init" property. If the method returns ERR_OK, it doesn't mean that transmission was successful. The 
                state of transmission is detectable by means of events (OnMasterSendComplete or OnError). Data to be sent are 
                not copied to an internal buffer and remains in the original location. Therefore the content of the buffer 
                should not be changed until the transmission is complete. Event "OnMasterBlockSent"can be used to detect the 
                end of the transmission. This method is available only for the MASTER or MASTER - SLAVE mode.
   - CI2C1_MasterReceiveBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 1 to the I2C bus and then receives the block of characters from the bus. The slave 
                address must be specified before, by the "SelectSlaveDevice" method or in component initialization section, 
                "Target slave address init" property. If the method returns ERR_OK, it doesn't mean that reception was 
                successful. The state of reception is detectable by means of events (OnMasterSendComplete  or OnError). Data to 
                be received are not copied to an internal buffer and remains in the original location. Therefore the content of 
                the buffer should not be changed until the transmission is complete. Event "OnMasterBlockReceived"can be used 
                to detect the end of the reception. This method is available only for the MASTER or MASTER - SLAVE mode.
   - CI2C1_SelectSlaveDevice -This method selects a new slave for communication by its 7-bit slave, 10-bit address or general 
                call value. Any send or receive method directs to or from selected device, until a new slave device is selected 
                by this method. This method is available for the MASTER mode.

Module "CsIO1"     (component ConsoleIO)

Module "SM1"       (component SPIMaster_LDD)
   - SM1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - SM1_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. The method <CancelBlockTransmission> can be used to cancel a transmit operation. This method 
                finishes immediately after calling it - it doesn't wait the end of data transmission. Use event <OnBlockSent> 
                to check the end of data transmission or method GetSentDataNum to check the state of sending.
   - SM1_ReceiveBlock -This method specifies the number of data to receive. The method returns ERR_BUSY until the specified 
                number of characters is received. The method <CancelBlockReception> can be used to cancel a running receive 
                operation. If a receive operation is not in progress (the method was not called or a previous operation has 
                already finished) all received characters will be lost without any notification. To prevent the loss of data 
                call the method immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> 
                event). This method finishes immediately after calling it - it doesn't wait the end of data reception. Use 
                event <OnBlockReceived> to check the end of data reception or method GetReceivedDataNum to check the state of 
                receiving.

Module "Cpu"       (component MK64FN1M0LL12)
   - Cpu_SetClockConfiguration -Calling of this method will cause the clock configuration change and reconfiguration of all 
                components according to the requested clock configuration setting.
   - Cpu_GetClockConfiguration -Returns the active clock configuration identifier. The method is automatically enabled if more 
                than one clock configuration is enabled in the component.

===================================================================================
